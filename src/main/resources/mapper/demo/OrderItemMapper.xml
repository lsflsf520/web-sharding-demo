<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ujigu.secure.demo.dao.OrderItemDao" >
  <resultMap id="BaseResultMap" type="com.ujigu.secure.demo.entity.OrderItem" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="goods" property="goods" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_uptime" property="lastUptime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="BaseColumnList" >
    id, user_id, order_id, goods, status, create_time, last_uptime
  </sql>
  <select id="findByPK" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="BaseColumnList" />
    from t_order_item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPK" parameterType="java.lang.Integer" >
    delete from t_order_item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ujigu.secure.demo.entity.OrderItem" >
    insert into t_order_item (id, user_id, order_id, 
      goods, status, create_time, 
      last_uptime)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, 
      #{goods,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{lastUptime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPK" parameterType="com.ujigu.secure.demo.entity.OrderItem" >
    update t_order_item
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="goods != null" >
        goods = #{goods,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUptime != null" >
        last_uptime = #{lastUptime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertReturnPK" useGeneratedKeys="true" keyProperty="id" parameterType="com.ujigu.secure.demo.entity.OrderItem" >
    insert into t_order_item (id, user_id, order_id, 
      goods, status, create_time, 
      last_uptime)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, 
      #{goods,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{lastUptime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertBatch" parameterType="java.util.List" >
    insert into t_order_item
		(id,user_id,order_id,goods,status,create_time,last_uptime)
	values 
	<foreach collection="list" item="item" separator="," index="index">
		(#{item.id,jdbcType=INTEGER},#{item.userId,jdbcType=INTEGER},#{item.orderId,jdbcType=INTEGER},#{item.goods,jdbcType=VARCHAR},#{item.status,jdbcType=CHAR},#{item.createTime,jdbcType=TIMESTAMP},#{item.lastUptime,jdbcType=TIMESTAMP})
	</foreach>
  </insert>
  <delete id="batchDel" >
    		delete from t_order_item
			where id in 
				<foreach collection="pks" item="item" separator="," open="(" close=")">
				#{item,jdbcType=INTEGER}
			</foreach>
  </delete>
  <update id="updateStatus" >
    		update t_order_item
			set ${statusColName} = #{delStatusVal, jdbcType=INTEGER}
			where id in 
				<foreach collection="pks" item="item" separator="," open="(" close=")">
				#{item,jdbcType=INTEGER}
			</foreach>
  </update>
  <select id="findByPks" resultMap="BaseResultMap" >
    		select 
			<include refid="BaseColumnList" />
			from t_order_item
			where id in 
				<foreach collection="pks" item="item" separator="," open="(" close=")"> 
					#{item,jdbcType=INTEGER}
				</foreach>
  </select>
  <select id="findAll" resultMap="BaseResultMap" >
    select
		<include refid="BaseColumnList"/>
	from t_order_item
	<where>
		<trim suffixOverrides="and" >
			<if test="id != null and id > 0" >
				and id = #{id,jdbcType=INTEGER}
			</if>
			<if test="userId != null and userId > 0" >
				and user_id = #{userId,jdbcType=INTEGER}
			</if>
			<if test="orderId != null and orderId > 0" >
				and order_id = #{orderId,jdbcType=INTEGER}
			</if>
			<if test="goods != null and goods != ''" >
				and goods = #{goods,jdbcType=VARCHAR}
			</if>
			<if test="status != null" >
				and status = #{status,jdbcType=CHAR}
			</if>
			<!--<if test="queryParam != null">
				<if test="queryParam.startDate != null and queryParam.startDate != '' and queryParam.endDate != null and queryParam.endDate != ''">
					and create_time between #{queryParam.startDate, jdbcType=VARCHAR} and #{queryParam.endDate, jdbcType=VARCHAR}
				</if>
				<if test="queryParam.keyword != null and queryParam.keyword != ''">
					and (name like concat('%', #{queryParam.keyword, jdbcType=VARCHAR}, '%') or other_col like concat('%', #{queryParam.keyword, jdbcType=VARCHAR}, '%') )
				</if>
			</if>-->
		</trim>
	</where>
  </select>
  
  <update id="createIfNotExistsTable">
        CREATE TABLE IF NOT EXISTS t_order_item (order_item_id BIGINT AUTO_INCREMENT, order_id BIGINT, user_id INT NOT NULL, status VARCHAR(50), PRIMARY KEY (order_item_id));
    </update>

    <update id="truncateTable">
        TRUNCATE TABLE t_order_item;
    </update>
    
    <update id="dropTable">
        DROP TABLE IF EXISTS t_order_item;
    </update>
</mapper>